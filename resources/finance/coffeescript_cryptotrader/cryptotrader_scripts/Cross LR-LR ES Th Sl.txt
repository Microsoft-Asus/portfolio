##########################################################
##########################################################
#####  Cruce LinReg-LinReg E/S BullBear Thres Slope  #####
##########################################################
##########################################################
sp1=12
lp1=146
sp1b=4
lp1b=16

sp2=5
lp2=236
sp2b=9
lp2b=201

BullBear=269

ThUL=0
ThDL=-0.071575559675694
ThUS=0
ThDS=0

SDP1=  6
SDT1= -7.152022838592529
SDP2= 76
SDT2= -6.739410877227783
SUP1= 36
SUT1=  3.033683061599731
SUP2= 69
SUT2=  9.923896789550781



################################
###      Ordering options    ###
################################
BACKTESTING = false             #Set to false before live trading!!
################################
###   Logging/Debug options  ###
################################
TICKLENGTH =    15              #Current period in minutes
MESSAGES =      true#true            #Display conditions every tick
##################################################################################################


class FUNCTIONS
    @DX: (a,b) ->
        (a-b)/((a+b)/2)
    @LR: (data,period) ->
        results = talib.LINEARREG
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @SL: (data,period) ->
        results = talib.LINEARREG_SLOPE
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)        
    @ST: (data, period) ->
        sum1=sum2=0
        for i in [1..period]
            select=data.length-1-period+i
            sum1=sum1+(data[select]*data[select])
            sum2=sum2+data[select]
            #log("i=#{i} | select=#{select} | data[#{select}]=#{data[select]} | sum1=#{sum1} | sum2=#{sum2}")
        sum2=sum2*sum2
        v=((period*sum1)-sum2)/(period*(period-1))
        #log("v=#{v}")
        result=Math.sqrt(v)
        result
    @MAX: (data, period) ->
        results = talib.MAX
        inReal: data
        startIdx: 0
        endIdx: data.length - 1
        optInTimePeriod: period
        _.last(results)
    @MIN: (data, period) ->
        results = talib.MIN
        inReal: data
        startIdx: 0
        endIdx: data.length - 1
        optInTimePeriod: period
        _.last(results)


init: (context)->
    

handle: (context, data, storage)->

    ins = data.instruments[0]
    price = ins.close[ins.close.length-1]
    
    c=ins.close
    h=ins.high
    l=ins.low
    highnow = ins.high[ins.high.length-1]
    lownow = ins.low[ins.low.length-1]

    storage.tick=storage.tick+1
    
    signal=0

    SD1=SD2=SU1=SU2=0

    if FUNCTIONS.SL(c,SDP1)<SDT1
        SD1=1
    if FUNCTIONS.SL(c,SDP2)<SDT2
        SD2=1
        

    if FUNCTIONS.SL(c,SUP1)>SUT1
        SU1=1    
    if FUNCTIONS.SL(c,SUP2)>SUT2
        SU2=1    


    if FUNCTIONS.LR(c,sp1)>FUNCTIONS.LR(c,lp1) and FUNCTIONS.DX(price,FUNCTIONS.LR(c,BullBear))>ThUL and SD1==0
        L1=1
    if FUNCTIONS.LR(c,sp1b)>FUNCTIONS.LR(c,lp1b) and FUNCTIONS.DX(price,FUNCTIONS.LR(c,BullBear))<ThDL and SD2==0
        L2=1
    
    if FUNCTIONS.LR(c,sp2)<FUNCTIONS.LR(c,lp2) and FUNCTIONS.DX(price,FUNCTIONS.LR(c,BullBear))>ThUS and SU1==0
        S1=1
    if FUNCTIONS.LR(c,sp2b)<FUNCTIONS.LR(c,lp2b) and FUNCTIONS.DX(price,FUNCTIONS.LR(c,BullBear))<ThDS and SU2==0
        S2=1
    
    
        

    if L1==1 or L2==1
        signal=1
    else
        if S1==1 or S2==1
            signal=-1



    #debug("L2: #{L2} | S2: #{S2} | DU: #{DU} | DD: #{DD} | Cr: #{Cr} | Fo: #{Fo} | NT: #{NT}")

    if signal==0
        signal=storage.lastsignal
        #debug("signal=0")


    price = ins.close[ins.close.length - 1]
    curr = portfolio.positions[ins.curr()].amount
    assets = portfolio.positions[ins.asset()].amount

    if signal==1 and curr>25 
        buy ins
        debug("Trying to Buy at #{price}")
        if storage.lastsignal==-1
            storage.numtrades=storage.numtrades+1
        storage.lastsignal=signal
    else
        if signal==-1 and assets>0.1
            sell ins
            debug("Trying to Sell at #{price}")
            sell ins
            if storage.lastsignal==1
                storage.numtrades=storage.numtrades+1
            storage.lastsignal=signal


    storage.startprice?=price
    storage.startXBT?=curr+assets*price
    storage.startETH?=assets+curr/price

    context.currencyLimit=(curr+assets*price).toFixed(2)
    context.assetLimit=(assets+curr/price).toFixed(2)
    context.BHgain=((price/storage.startprice-1)*storage.startXBT).toFixed(2)
    context.percentBHgain=((price/storage.startprice-1)*100).toFixed(2)
    context.XBTGain=(context.currencyLimit-storage.startXBT).toFixed(2)
    context.percentXBTGain=((context.currencyLimit/storage.startXBT-1)*100).toFixed(2)
    context.ETHgain=(context.assetLimit-storage.startETH).toFixed(2)
    context.percentETHgain=((context.assetLimit/storage.startETH-1)*100).toFixed(2)

    if MESSAGES==true
        debug  " Start in CNY: #{storage.startXBT.toFixed(2)} | TOT in CNY :    #{context.currencyLimit} | Start in BTC: #{storage.startETH.toFixed(2)} | TOT in BTC: #{context.assetLimit}" 
        debug  " B&H % gain:  #{context.percentBHgain}% | Total B&H profit:     #{context.BHgain} | Account value in CNY:     #{context.assetLimit} " 
        debug  " CNY % gain: #{context.percentXBTGain}% | Total CNY profit:    #{context.XBTGain} | CNY holdings:            #{curr.toFixed(2)}"        
        debug  " BTC % gain:  #{context.percentETHgain}% | Total BTC profit:     #{context.ETHgain} | Asset holdings:           #{assets.toFixed(2)}"  
        debug  " ****************************************************************************************** "     
              
            
            
            
           

              
            
            
            
          
################################
################################        
#####        P III         #####
################################
################################        
pLRL1=91
pLRL2=77
pSTDL1=54
pSTDL2=97
kL1=1.228966593742371
kL2=4.894714832305908
ThresL=-0.167073488235474    
################################        
pLRS1=99
pLRS2=52
pSTDS1=98
pSTDS2=71
kS1=2.979763507843018
kS2=0.586961388587952
ThresS=0.874339520931244
################################        
CP1=103
CP2=172
CT=0
FP1=125
FP2=14
FT=0.101164758205414
################################        


################################
###      Ordering options    ###
################################
BACKTESTING = false             #Set to false before live trading!!
################################
###   Logging/Debug options  ###
################################
TICKLENGTH =    15              #Current period in minutes
MESSAGES =      true           #Display conditions every tick
##################################################################################################


class FUNCTIONS
    @DX: (a,b) ->
        (a-b)/((a+b)/2)
    @LR: (data,period) ->
        results = talib.LINEARREG
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @ST: (data, period) ->
        sum1=sum2=0
        for i in [1..period]
            select=data.length-1-period+i
            sum1=sum1+(data[select]*data[select])
            sum2=sum2+data[select]
            #log("i=#{i} | select=#{select} | data[#{select}]=#{data[select]} | sum1=#{sum1} | sum2=#{sum2}")
        sum2=sum2*sum2
        v=((period*sum1)-sum2)/(period*(period-1))
        #log("v=#{v}")
        result=Math.sqrt(v)
        result




init: (context)->
    

handle: (context, data, storage)->

    ins = data.instruments[0]
    price = ins.close[ins.close.length-1]
    c=ins.close

    storage.tick=storage.tick+1
    
    signal=0


    L2=(( FUNCTIONS.LR(c,pLRL1)+(FUNCTIONS.ST(c,pSTDL1)*kL1) ) + ( FUNCTIONS.LR(c,pLRL2)+(FUNCTIONS.ST(c,pSTDL2)*kL2) ))/2
    S2=(( FUNCTIONS.LR(c,pLRS1)+(FUNCTIONS.ST(c,pSTDS1)*kS1) ) + ( FUNCTIONS.LR(c,pLRS2)+(FUNCTIONS.ST(c,pSTDS2)*kS2) ))/2
    

    DU=FUNCTIONS.DX(price,L2)
    DD=FUNCTIONS.DX(price,S2)
    
    #Market Crashing
    if FUNCTIONS.DX(FUNCTIONS.LR(c,CP1),FUNCTIONS.LR(c,CP2)) < CT
        Cr=1
    else
        Cr=0
        
    if FUNCTIONS.DX(FUNCTIONS.LR(c,FP1),FUNCTIONS.LR(c,FP2)) > FT
        Fo=1
    else
        Fo=0
    


    if (DU>ThresL and Cr==0) or Fo==1
        signal=1
    else
        if (DD<ThresS and Fo==0) or Cr==1
            signal=-1


    
    #debug("L2: #{L2} | S2: #{S2} | DU: #{DU} | DD: #{DD} | Cr: #{Cr} | Fo: #{Fo} | NT: #{NT}")

    if signal==0
        signal=storage.lastsignal
        debug("signal=0")


    debug("S #{signal} | pLRL1: #{FUNCTIONS.LR(c,pLRL1)} | pLRL2: #{FUNCTIONS.LR(c,pLRL2)} | pSTDL1: #{FUNCTIONS.ST(c,pSTDL1)} | pSTDL2: #{FUNCTIONS.ST(c,pSTDL2)}")



    price = ins.close[ins.close.length - 1]
    curr = portfolio.positions[ins.curr()].amount
    assets = portfolio.positions[ins.asset()].amount

    if signal==1 and curr>25 
        buy ins
        debug("Trying to Buy at #{price}")
        if storage.lastsignal==-1
            storage.numtrades=storage.numtrades+1
        storage.lastsignal=signal
    else
        if signal==-1 and assets>0.1
            sell ins
            debug("Trying to Sell at #{price}")
            sell ins
            if storage.lastsignal==1
                storage.numtrades=storage.numtrades+1
            storage.lastsignal=signal


    storage.startprice?=price
    storage.startXBT?=curr+assets*price
    storage.startETH?=assets+curr/price

    context.currencyLimit=(curr+assets*price).toFixed(2)
    context.assetLimit=(assets+curr/price).toFixed(2)
    context.BHgain=((price/storage.startprice-1)*storage.startXBT).toFixed(2)
    context.percentBHgain=((price/storage.startprice-1)*100).toFixed(2)
    context.XBTGain=(context.currencyLimit-storage.startXBT).toFixed(2)
    context.percentXBTGain=((context.currencyLimit/storage.startXBT-1)*100).toFixed(2)
    context.ETHgain=(context.assetLimit-storage.startETH).toFixed(2)
    context.percentETHgain=((context.assetLimit/storage.startETH-1)*100).toFixed(2)

    if MESSAGES==true
        debug  " Start in CNY: #{storage.startXBT.toFixed(2)} | TOT in CNY :    #{context.currencyLimit} | Start in BTC: #{storage.startETH.toFixed(2)} | TOT in BTC: #{context.assetLimit}" 
        debug  " B&H % gain:  #{context.percentBHgain}% | Total B&H profit:     #{context.BHgain} | Account value in CNY:     #{context.assetLimit} " 
        debug  " CNY % gain: #{context.percentXBTGain}% | Total CNY profit:    #{context.XBTGain} | CNY holdings:            #{curr.toFixed(2)}"        
        debug  " BTC % gain:  #{context.percentETHgain}% | Total BTC profit:     #{context.ETHgain} | Asset holdings:           #{assets.toFixed(2)}"  
        debug  " ****************************************************************************************** "     
              
            
            
            
           

              
            
            
            
          
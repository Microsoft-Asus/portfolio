
            
              
                
  
            
              
                
#################################################################################
### Z+Score2
#################################################################################
BullBearPeriod=34
PeriodBearLong=23
PeriodBullLong=4
PeriodBearShort=89
PeriodBullShort=10
ThresBearLong=-0.619899988174438
ThresBullLong=-0.633400022983551
ThresBearShort=-1.530147552490234
ThresBullShort=0.622776806354523

################################
###      Ordering options    ###
################################
BACKTESTING = false             #Set to false before live trading!!
################################
###   Logging/Debug options  ###
################################
TICKLENGTH =    60              #Current period in minutes
MESSAGES =      true#true            #Display conditions every tick
##################################################################################################


class FUNCTIONS
    @TSF: (data, period) ->
        results = talib.TSF
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @ZSCORE: (data, period) ->
        (data[data.length-1] - FUNCTIONS.TSF(data, period))/FUNCTIONS.STANDARD_DEV(data, period)
    @ZLEMA: (data, period) ->
        2*FUNCTIONS.EMA(data,period)-FUNCTIONS.EMA(data,(2*period-1))
    @EMA: (data, period) ->
        results = talib.EMA
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @STANDARD_DEV: (data, period) ->
        sum1=sum2=0
        for i in [1..period]
            select=data.length-1-period+i
            sum1=sum1+(data[select]*data[select])
            sum2=sum2+data[select]
            #log("i=#{i} | select=#{select} | data[#{select}]=#{data[select]} | sum1=#{sum1} | sum2=#{sum2}")
        sum2=sum2*sum2
        v=((period*sum1)-sum2)/(period*(period-1))
        #log("v=#{v}")
        result=Math.sqrt(v)
        result



init: (context)->
    

handle: (context, data, storage)->

    ins = data.instruments[0]
    price = ins.close[ins.close.length-1]

    #zsL=FUNCTIONS.ZSCORE(ins.close,PL)
    #zsS=FUNCTIONS.ZSCORE(ins.close,PS)
    
    storage.tick=storage.tick+1
    
    signal=0

    if price < FUNCTIONS.ZLEMA(ins.close,BullBearPeriod)
        if FUNCTIONS.ZSCORE(ins.close,PeriodBearLong) < ThresBearLong
            signal=1
    else
        if FUNCTIONS.ZSCORE(ins.close,PeriodBullLong) > ThresBullLong
            signal=1

    if signal==1
        signal=1
    else
        if price < FUNCTIONS.ZLEMA(ins.close,BullBearPeriod)
            if FUNCTIONS.ZSCORE(ins.close,PeriodBearShort) > ThresBearShort
                signal=-1
        else
            if FUNCTIONS.ZSCORE(ins.close,PeriodBullShort) < ThresBullShort
                signal=-1
        

    if signal==0
        signal=storage.lastsignal


    if signal==1
        buy(ins,null,price,3200)
        if storage.lastsignal==-1
            storage.numtrades=storage.numtrades+1
        storage.lastsignal=signal
    else
        if signal==-1
            sell(ins,null,price,3200)
            if storage.lastsignal==1
                storage.numtrades=storage.numtrades+1
            storage.lastsignal=signal

    price = ins.close[ins.close.length - 1]
    curr = portfolio.positions[ins.curr()].amount
    assets = portfolio.positions[ins.asset()].amount

    storage.startprice?=price
    storage.startXBT?=curr+assets*price
    storage.startETH?=assets+curr/price

    context.currencyLimit=(curr+assets*price).toFixed(2)
    context.assetLimit=(assets+curr/price).toFixed(2)
    context.BHgain=((price/storage.startprice-1)*storage.startXBT).toFixed(2)
    context.percentBHgain=((price/storage.startprice-1)*100).toFixed(2)
    context.XBTGain=(context.currencyLimit-storage.startXBT).toFixed(2)
    context.percentXBTGain=((context.currencyLimit/storage.startXBT-1)*100).toFixed(2)
    context.ETHgain=(context.assetLimit-storage.startETH).toFixed(2)
    context.percentETHgain=((context.assetLimit/storage.startETH-1)*100).toFixed(2)

            

    if MESSAGES==5  
        debug  " Start in CNY: #{storage.startXBT.toFixed(2)} | TOT in CNY :    #{context.currencyLimit} | Start in BTC: #{storage.startETH.toFixed(2)} | TOT in BTC: #{context.assetLimit}" 
        debug  " B&H % gain:  #{context.percentBHgain}% | Total B&H profit:     #{context.BHgain} | Account value in CNY:     #{context.assetLimit} " 
        debug  " CNY % gain: #{context.percentXBTGain}% | Total CNY profit:    #{context.XBTGain} | CNY holdings:            #{curr.toFixed(2)}"        
        debug  " BTC % gain:  #{context.percentETHgain}% | Total BTC profit:     #{context.ETHgain} | Asset holdings:           #{assets.toFixed(2)}"  
        debug  " ****************************************************************************************** "     
              
            
            
            
           

              
            
            
            
          
################################ 
################################        
#####  ZForce3LRLRS TRIGGER ####
################################
################################
### 12-30 BTC optimization 4740%
TRADING STRATEGY

Miscellaneous Instrument Chart #1.cht
FullCT OKcoin BTCCNY15m.csv (FullCT OKcoin BTCCNY15m)
3,895.352
1/1/2016 2:03:53 PM


TRADING RULES

Rules
BUY LONG CONDITIONS: [All of which must be true]
     A>B(ZForce3LR+(-10,Close,Close,97,21,Close,195,3.7,Close,Close,157,7,Close,116,8.400001,Close,Close,169,14,Close,87),7.6)
SELL SHORT CONDITIONS: [All of which must be true]
     A<B(ZForce3LR+(-10,Close,Close,97,21,Close,195,3.7,Close,Close,157,7,Close,116,8.400001,Close,Close,169,14,Close,87),-3)
###
A1          = -10
P1          = 97
FL1         = 21
STDP1       = 195  

B1          = 3.7 
P2          = 157 
FL2         = 7  
STDP2       = 116 

C1          = 8.4
P3          = 169 
FL3         = 14  
STDP3       = 87

TL1         = 7.6
TS1         =-3

LRT1        = 5
FLT1        = 3
LAGT2       = 3
LRT2        = 16
FLT2        = 3

LRT3        = 6
FLT3        = 3
LAGT4       = 3
LRT4        = 20
FLT4        = 3

###################
###################


class FUNCTIONS
    @DX: (a,b) ->
        (a-b)/((a+b)/2)
    @LR: (data,period,lag) ->
        results = talib.LINEARREG
            inReal: data
            startIdx: 0
            endIdx: data.length - 1 - lag
            optInTimePeriod: period
        _.last(results)
    @LRS: (data,period,lag) ->
        results = talib.LINEARREG_SLOPE
            inReal: data
            startIdx: 0
            endIdx: data.length - 1 - lag
            optInTimePeriod: period
        _.last(results)
    @ST: (data, period) ->
        sum1=sum2=0
        for i in [1..period]
            select=data.length-1-period+i
            sum1=sum1+(data[select]*data[select])
            sum2=sum2+data[select]
            #log("i=#{i} | select=#{select} | data[#{select}]=#{data[select]} | sum1=#{sum1} | sum2=#{sum2}")
        sum2=sum2*sum2
        v=((period*sum1)-sum2)/(period*(period-1))
        #log("v=#{v}")
        result=Math.sqrt(v)
        result
        ##############################################
        ## Full Stats Module v1.8 by @tweakaholic   ##
        ## BTC: 1HiWMszn2afDJv4jidR7DuiQvHVzwtsBTa  ##
        ##        Tips greatly appreciated!         ##      
        ##    (This took quite a while to write)    ##
        ##    Thank you, good luck to your bots!    ##
        ##############################################
class STATS
    @tradestats: (context, data, storage) ->
        STATS.calc(context,data, storage)
        STATS.concise(context, storage)
    @fullstats: (context, data, storage)->
        STATS.calc(context,data, storage)
        STATS.display(context, storage)
    @calc: (context,data, storage) ->
        ins = data.instruments[0]
        price = ins.price
        curr = portfolio.positions[ins.curr()].amount
        assets = portfolio.positions[ins.asset()].amount
        ##Leave these alone
        if storage.calctick<=1
            storage.max_sp=storage.max_sl=storage.max_lp=storage.max_ll=0
            storage.long_profit=storage.long_loss=storage.short_profit=storage.short_loss=0
            storage.trades=storage.long_win=storage.long_lose=storage.short_win=storage.short_lose=0
            storage.holding_assets=storage.holding_curr=true

        if storage.calctick<=1
            storage.ltp=storage.lsp=storage.lbp=ins.price
        if assets/(curr+0.01)>0.9
            holding_assets=true
        if curr/(assets+0.01)>0.9
            holding_curr=true
        buy = holding_assets and not storage.holding_assets
        sell = holding_curr and not storage.holding_curr
        storage.holding_assets  =   holding_assets
        storage.holding_curr    =   holding_curr
        
        if buy
            storage.trades++
            storage.lbp=storage.ltp=price
            diff=storage.lsp-storage.lbp            #profitable buy: last sell price - buy price > 0
            pdiff=100*diff/storage.lsp              #percent fiat profit(shorting)=(lsp-lbp)/lsp
            storage.lt_profit=(pdiff).toFixed(1)    #percent asset profit(selling+rebuying)=(lsp-lbp)/lbp
            storage.last_trade="Buy"
            if diff>0
                storage.short_win++
                storage.short_profit+=diff
                if pdiff>storage.max_sp
                    storage.max_sp=pdiff
            if diff<0
                storage.short_lose++
                storage.short_loss+=diff
                if pdiff<storage.max_sl
                    storage.max_sl=pdiff
        
        if sell
            storage.trades++
            storage.lsp=storage.ltp=price
            diff=storage.lsp-storage.lbp            #profitable sell: last sell price - last buy price > 0
            pdiff=100*diff/storage.lbp              #percent fiat profit(long)=(lsp-lbp)/lbp
            storage.lt_profit=(pdiff).toFixed(1)    #last trade profit
            storage.last_trade="Sell"
            if diff>0
                storage.long_win++
                storage.long_profit+=diff
                if pdiff>storage.max_lp
                    storage.max_lp=pdiff
            if diff<0
                storage.long_lose++
                storage.long_loss+=diff
                if pdiff<storage.max_ll
                    storage.max_ll=pdiff
        storage.last_trade          ?=  "None"
        storage.lt_profit           ?=  0
        storage.winners           =   if storage.trades<2 then 0 else "#{storage.long_win}/#{storage.long_win+storage.long_lose} = #{(100*storage.long_win/(storage.long_win+storage.long_lose+10e-6)).toFixed(1)}%"
        storage.s_winners           =   if storage.trades<2 then 0 else "#{storage.short_win}/#{storage.short_win+storage.short_lose} = #{(100*storage.short_win/(storage.short_win+storage.short_lose+10e-6)).toFixed(1)}%"
        storage.totagain          =   if storage.trades<2 then 0 else (storage.long_profit+storage.short_profit+storage.long_loss+storage.short_loss)
        storage.totalong_gain     =   if storage.trades<2 then 0 else storage.long_profit+storage.long_loss
        storage.totashort_gain    =   if storage.trades<2 then 0 else storage.short_profit+storage.short_loss
        lpr                         =   if storage.trades<2 then 0 else (storage.long_profit/(-storage.long_loss+10e-6)).toFixed(2)
        spr                         =   if storage.trades<2 then 0 else (storage.short_profit/(-storage.short_loss+10e-6)).toFixed(2)
        storage.long_profit_ratio   =   if lpr>100 then 100 else if lpr<0.01 then 0 else lpr
        storage.short_profit_ratio  =   if spr>100 then 100 else if spr<0.01 then 0 else spr
        
        #Record number of times bot has been automatically restarted
        storage.restarts?=-1
        if context.restart
            storage.restarts++
            context.restart=false

        storage.price           =   price
        storage.curr            =   (curr).toFixed(2)
        storage.assets          =   (assets).toFixed(2)
        storage.startprice      ?=  (price).toFixed(2)
        storage.start_curr      ?=  (curr+assets*price).toFixed(2)
        storage.start_assets    ?=  (assets+curr/price).toFixed(2)
        storage.curr_lim        =   (curr+assets*price).toFixed(2)                                      #Currency limit: account value in currency
        storage.asset_lim       =   (assets+curr/price).toFixed(2)                                      #Asset limit: account value in assets
        storage.bh_gain         =   ((price/storage.startprice-1)*storage.start_curr).toFixed(2)        #Buy and hold gain
        storage.p_bh_gain       =   ((price/storage.startprice-1)*100).toFixed(2)                       #percent buy and hold gain
        storage.curr_gain       =   (storage.curr_lim-storage.start_curr).toFixed(2)
        storage.p_curr_gain     =   ((storage.curr_lim/storage.start_curr-1)*100).toFixed(2)
        storage.asset_gain      =   (storage.asset_lim-storage.start_assets).toFixed(2)
        storage.p_asset_gain    =   ((storage.asset_lim/storage.start_assets-1)*100).toFixed(2)
        storage.days            =   (storage.calctick*context.ticklength/1440)
        storage.freq            =   if storage.days<=1 then storage.trades else (storage.trades/storage.days).toFixed(1)
        
    @concise: (context, storage) ->
        if storage.last_trade=="Buy"
            info  " ****************************************#{context.botname}****************************************** "  
            info  " |Day #{(storage.days).toFixed(1)}..... Trades: #{(storage.trades).toFixed(0)}...Trade Freq: #{storage.freq}.....Holdings: #{storage.curr} #{ context.tradecurrency}, #{storage.assets} #{ context.tradeasset}" 
            info  " |Last Trade: #{storage.last_trade} ...Last Trade Profit: #{(storage.lt_profit)}%... Last Trade Price: #{storage.ltp}... Current Price: #{storage.price}"
            info  " *************************************************************************************************** "
        if storage.last_trade=="Sell"
            warn  " ****************************************#{context.botname}****************************************** "  
            warn  " |Day #{(storage.days).toFixed(1)}..... Trades: #{(storage.trades).toFixed(0)}...Trade Freq: #{storage.freq}.....Holdings: #{storage.curr} #{ context.tradecurrency}, #{storage.assets} #{ context.tradeasset}" 
            warn  " |Last Trade: #{storage.last_trade} ...Last Trade Profit: #{(storage.lt_profit)}%... Last Trade Price: #{storage.ltp}... Current Price: #{storage.price}"
            warn  " *************************************************************************************************** "

    @display: (context, storage) ->
        debug  " ****************************************#{context.botname}****************************************** "  
        debug  " |Day #{(storage.days).toFixed(1)}..Trades: #{(storage.trades).toFixed(0)}..Restarts: #{(storage.restarts)}..Trade Freq: #{storage.freq}..Holdings: #{storage.curr} #{ context.tradecurrency}, #{storage.assets} #{ context.tradeasset}" 
        debug  " |Last Trade: #{storage.last_trade} ...Last Trade Profit: #{(storage.lt_profit)}%... Last Trade Price: #{storage.ltp}... Current Price: #{storage.price}"
        debug  " |Longs -  Winners: #{storage.winners}... Profit/Loss: #{storage.long_profit_ratio}... Max Win: #{(storage.max_lp).toFixed(1)}%... Max Loss: #{(storage.max_ll).toFixed(1)}%"
        debug  " |Shorts - Winners: #{storage.s_winners}.. Profit/Loss: #{storage.short_profit_ratio}... Max Win: #{(storage.max_sp).toFixed(1)}%... Max Loss: #{(storage.max_sl).toFixed(1)}%"
        debug  " |Equity Current/Initial: .. #{storage.curr_lim}/#{storage.start_curr} #{ context.tradecurrency}..... Equity Current/Initial:..  #{storage.asset_lim}/#{storage.start_assets} #{ context.tradeasset}" 
        debug  " |Actual % Gain: ..... #{storage.p_curr_gain}% #{ context.tradecurrency}, #{storage.p_asset_gain }% #{ context.tradeasset} ..... Actual Profit:... #{storage.curr_gain} #{ context.tradecurrency}, #{storage.asset_gain } #{ context.tradeasset}"        
        debug  " |Buy & Hold % Gain: ............. #{storage.p_bh_gain  }% #{ context.tradecurrency}..... Buy & Hold Profit  : .........#{storage.bh_gain  } #{ context.tradecurrency}"
        debug  " *************************************************************************************************** "     

init: (context)->
    
    context.botname         = "ZF3"
    context.tradecurrency   = "CNY"
    context.tradeasset      = "BTC" 
    context.ticklength      = 15                        #tick length in minutes
    context.statsinterval   = 16                        #desired ticks between displaying full stats
    context.restart         = true
handle: (context, data, storage)->
    storage.calctick?=0
    STATS.calc(context,data,storage)
    if storage.calctick%context.statsinterval==0 then STATS.display(context, storage)
    storage.calctick++
    
    ins = data.instruments[0]
    close = ins.close[ins.close.length-1]
    c=ins.close
    storage.tick?=0
    storage.tick++
    signal=0
    #Indicators
    lr1    =   FUNCTIONS.LR(c, P1, 0)+FUNCTIONS.LRS(c, P1, 0)*FL1
    lr2    =   FUNCTIONS.LR(c, P2, 0)+FUNCTIONS.LRS(c, P2, 0)*FL2
    lr3    =   FUNCTIONS.LR(c, P3, 0)+FUNCTIONS.LRS(c, P3, 0)*FL3
#    4    =   FUNCTIONS.LR(c, P4)
    stddev1 =   FUNCTIONS.ST(c, STDP1)
    stddev2 =   FUNCTIONS.ST(c, STDP2)
    stddev3 =   FUNCTIONS.ST(c, STDP3)
#    stddev4 =   FUNCTIONS.ST(c, STDP4)
    zscore1 =   (close-lr1)/stddev1
    zscore2 =   (close-lr2)/stddev2
    zscore3 =   (close-lr3)/stddev3    
#    zscore4 =   (close-4)/stddev4
    
    #Triggers
#    lrt1    =   FUNCTIONS.LR(c, LRT1, 0)+FUNCTIONS.LRS(c, LRT1, 0)*FLT1
#    lrt2    =   FUNCTIONS.LR(c, LRT2, LAGT2)+FUNCTIONS.LRS(c, LRT2, LAGT2)*FLT2
#    lrt3    =   FUNCTIONS.LR(c, LRT3, 0)+FUNCTIONS.LRS(c, LRT3, 0)*FLT3
#    lrt4    =   FUNCTIONS.LR(c, LRT4, LAGT4)+FUNCTIONS.LRS(c, LRT4, LAGT4)*FLT4#

    #Strategy
    signal=0
    
    Sum1= A1*zscore1 + B1*zscore2 + C1* zscore3 #+ D1*zscore4


    BUY=  (Sum1 >= TL1) #and lrt1>=lrt2#or ((not (Sum1 >= TL1) and not (Sum <= TS1)) and (Sum2 <= TL2))
    SELL= (Sum1 <= TS1) #and lrt3<=lrt4#or ((not (Sum1 >= TL1) and not (Sum <= TS1)) and (Sum2 >= TS2))
    if BUY
        signal=1
    if SELL
        signal=-1
    
    #Ordering
    price = ins.close[ins.close.length - 1]
    curr = portfolio.positions[ins.curr()].amount
    assets = portfolio.positions[ins.asset()].amount
    
    if signal==1 and curr>0.1*price
        buy ins
        storage.lastsignal=signal
        STATS.tradestats(context,data, storage)
        plotMark
            BUY: ins.price
    if signal==-1 and assets>0.1
        sell ins
        storage.lastsignal=signal
        STATS.tradestats(context,data, storage)
        plotMark
            SELL: ins.price


    plot
#        lrt1:   lrt1
#        lrt2:   lrt2
#        lrt3:   lrt3
#        lrt4:   lrt4
        Signal:     Sum1
        LongThresh:  TL1
        ShortThresh: TS1
        axis2max:    60
    setPlotOptions
        axis2max:
            secondary: true
            color: 'transparent'
        Signal:
            secondary: true
        LongThresh: 
            secondary: true
        ShortThresh:
            secondary: true
            
            
            
            
          
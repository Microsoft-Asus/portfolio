P1      =   30
P2      =   46
THRESHOLD = 0.001    #percent difference for ema cross to trigger


################################
###      Ordering options    ###
################################
BACKTESTING = false             #Set to false before live trading!!
SPLIT_AMOUNT =  1               #Trade sizes are randomized
TIMEOUT =       47              #Trade timeouts are not randomized - do not use <30 seconds or CT fucks up
DELAY = 0                #If using as a backup bot, set to 1.5*SPLIT_AMOUNT*TIMEOUT
################################
###   Logging/Debug options  ###
################################
TICKLENGTH =    1              #Current period in minutes
MESSAGES =      true            #Display conditions every tick
QTRMESSAGES =   true            #Display stats 4x/day
DEBUGGING =     false #true            #Display trade conditions every tick
SHOWPLOTS =     true            #show plots
##################################################################################################

class FUNCTIONS
    @populate: (target, ins) ->
        for i in [0...ins.close.length]
            t =
                open: ins.open[..i]
                close: ins.close[..i]
                high: ins.high[..i]
                low: ins.low[..i]
            target.put(t)
    @DIFF: (a, b) ->
        100*(a-b)/((a+b)/2)
    @ROUND_DOWN: (value, places) ->
        offset = Math.pow(10, places)
        Math.floor(value*offset)/offset
    @ZLEMA: (data, period) ->
        2*FUNCTIONS.EMA(data,period)-FUNCTIONS.EMA(data,(2*period-1))
    @ZLDEMA: (data, period) ->   
        2*FUNCTIONS.DEMA(data,period)-FUNCTIONS.DEMA(data,(2*period-1))
    @DEMA: (data, period) ->
        results = talib.DEMA
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @TSF: (data, lag, period) ->
        results = talib.TSF
            inReal : data
            startIdx: 0
            endIdx: data.length-lag
            optInTimePeriod:period
        _.last(results)
    @LINEARREG: (data, lag, period) ->
        results = talib.LINEARREG
            inReal : data
            startIdx: 0
            endIdx: data.length-lag
            optInTimePeriod:period
        _.last(results)
  
    @linearreg_angle: (data, lag, period) ->
        results = talib.LINEARREG_ANGLE
            inReal : data
            startIdx: 0
            endIdx: data.length-lag
            optInTimePeriod:period
        _.last(results)
  
    @linearreg_intercept: (data, lag, period) ->
        results = talib.LINEARREG_INTERCEPT
            inReal : data
            startIdx: 0
            endIdx: data.length-lag
            optInTimePeriod:period
        _.last(results)
   
    @linearreg_slope: (data, lag, period) ->
        results = talib.LINEARREG_SLOPE
            inReal : data
            startIdx: 0
            endIdx: data.length-lag
            optInTimePeriod:period
        _.last(results)
    @EMA: (data, period) ->
        results = talib.EMA
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @SMA: (data, period) ->
        results = talib.SMA
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @MAX: (data, period) ->
        results = talib.MAX
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @MIN: (data, period) ->
        results = talib.MIN
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @ATR: (high, low, close, period) ->
        results = talib.ATR
            high: high
            low: low
            close: close
            startIdx: 0
            endIdx: high.length - 1
            optInTimePeriod: period
        _.last(results)
    @NATR: (high, low, close, period) ->
        results=0
        for i in [1..period]
            results+=(Math.max(close[close.length-1-i],high[high.length-i])-Math.min(close[close.length-1-i],low[low.length-i]))
        results/(period*close[close.length-1])

class TRADE

    @BUY: (ins, split, timeout, curr, assets, price) ->
        if BACKTESTING then buy ins
        assetLimit=assets+curr/price
        minimum = 0.05*price
        amount = FUNCTIONS.ROUND_DOWN(assetLimit/split, 4)
        if MESSAGES then debug "Beginning to buy #{assetLimit.toFixed(2)} in #{split} orders" 
        n=0
        buying = true
        while buying == true
            if curr >= 1.1*amount*price
                n++
                if MESSAGES then debug "Iceberg order #{n}" 
                tradeamount = FUNCTIONS.ROUND_DOWN(((0.9+0.2*Math.random())*amount),4)
                buy(ins, tradeamount, null, timeout)
                curr = portfolio.positions[ins.curr()].amount
                if MESSAGES
                    debug "currency " + curr.toFixed(2)
                if curr < minimum
                    if MESSAGES then debug "Last order"
                    buy(ins, null, null, timeout)
                    buying = false
                    n=0
                    if MESSAGES then debug "Finished Buying"

            else
                if MESSAGES then debug "Last Order"
                buy(ins, null, null, timeout)
                buying = false
                n=0
                if MESSAGES then debug "Finished Buying" 
    
    @SELL: (ins, split, timeout, curr, assets, price) ->
        if BACKTESTING then sell ins
        assetLimit=assets+curr/price
        minimum = 0.05
        amount = FUNCTIONS.ROUND_DOWN(assetLimit/split, 4)
        if MESSAGES then debug "Beginning to sell #{assetLimit.toFixed(3)} in #{split} orders"
        n=0
        selling = true
        while selling == true
            if assets >= 1.1*amount
                n++
                if MESSAGES then debug "Iceberg order #{n}"
                tradeamount = FUNCTIONS.ROUND_DOWN(((0.9+0.2*Math.random())*amount),4)
                sell(ins, tradeamount, null, timeout)
                assets = portfolio.positions[ins.asset()].amount
                if MESSAGES then debug "assets " + assets.toFixed(2)
                if assets  < minimum
                    if MESSAGES then debug "Last order"
                    sell(ins,null,null,timeout)
                    selling = false
                    n=0
                    if MESSAGES then debug "Finished Selling"
            else
                if MESSAGES then debug "Last order"
                sell(ins,null,null,timeout)
                selling = false
                n=0
                if MESSAGES then debug "Finished Selling"
                
init: (context)->
    
    # TRADING
    if SPLIT_AMOUNT < 1
        SPLIT_AMOUNT = 1
    context.trade_split = SPLIT_AMOUNT
    context.trade_timeout  = TIMEOUT
    
    # WELCOME
    info  " Starting Bot "
    info "We are trading Live with #{SPLIT_AMOUNT} Iceberg orders and #{TIMEOUT} second timeout for each order"



handle: (context, data, storage)->

    ins = data.instruments[0]
    storage.lastBuyPrice ?= 0
    storage.price = ins.close[ins.close.length - 1]
    storage.curr = portfolio.positions[ins.curr()].amount
    storage.assets = portfolio.positions[ins.asset()].amount
   
    # FOR FINALISE STATS
    context.price = storage.price.toFixed(2)
    context.balance_curr = storage.curr.toFixed(2)
    context.balance_assets = storage.assets.toFixed(2)
   
    # CALLING INDICATORS

    LR1=FUNCTIONS.LINEARREG(ins.close,1,P1)
    LR2=FUNCTIONS.LINEARREG(ins.close,1,P2)
    #TRADE LOGIC


    if LR1>LR2
        BUY = true
    if LR1<LR2
        SELL = true
    
    #TRADING

    price=storage.price
    curr=storage.curr
    assets=storage.assets
    storage.numTrades?=0
    storage.orderTick?=0
    storage.totalslip?=0
    if curr/price > 0.1 && BUY
        storage.lastBuyPrice = price
        storage.numTrades++
        storage.orderTick=0
        #buyprice=FUNCTIONS.ROUND_DOWN(vwapbuy,2)+0.01
        #slippage = (price-buyprice)*curr/price
        #storage.totalslip = slippage+storage.totalslip
        #debug "price "+price+ " buy price "+buyprice + " total slippage amount " + storage.totalslip
        if DELAY!=0
            now = ((Date.now() % 60000) / 1000).toFixed(1)
            debug "time: #{now}s Waiting for #{DELAY} sec before placing orders"
            buy(ins,0.01,price/2,DELAY)
            now = ((Date.now() % 60000) / 1000).toFixed(1)
            debug "time: #{now}s"
        #if buy(ins,null,buyprice,TIMEOUT)
        if TRADE.BUY(ins, context.trade_split, TIMEOUT, curr, assets, price)
            curr = portfolio.positions[ins.curr()].amount
            if curr/price < 0.1
                storage.orderTick = 0
                debug "orderTick = 0"
    if assets > 0.1 && SELL
        storage.lastSellPrice = price
        storage.numTrades++
        storage.orderTick=0
        #sellprice=FUNCTIONS.ROUND_DOWN(vwapsell,2)
        #slippage=(sellprice-price)*assets
        #storage.totalslip = slippage+storage.totalslip
        #debug "price "+price+ " sell price "+sellprice + " total slippage amount " + storage.totalslip
        if DELAY!=0
            now = ((Date.now() % 60000) / 1000).toFixed(1)
            debug "time: #{now}s Waiting for #{DELAY} sec before placing orders"
            sell(ins,0.01,price*2,DELAY) 
            now = ((Date.now() % 60000) / 1000).toFixed(1)
            debug "time: #{now}s"
        #if sell(ins,null,sellprice,TIMEOUT)
        if TRADE.SELL(ins, context.trade_split, TIMEOUT, curr, assets, price)
            assets = portfolio.positions[ins.asset()].amount
            if assets < 0.1
                storage.orderTick = 0
                debug "orderTick = 0"
    storage.orderTick++

    # PLOTTING
    if SHOWPLOTS
        plot
            LR1 : LR1
            LR2 : LR2

    # LOGGING
    storage.tick?=0
    storage.numTrades?=0
    storage.tick++
    price = storage.price
    curr = storage.curr
    assets = storage.assets
    storage.startprice?=price
    storage.startFiat?=curr+assets*price
    storage.startBTC?=assets+curr/price
    context.tick=storage.tick
    context.numTrades=storage.numTrades
    context.currencyLimit=(curr+assets*price).toFixed(2)
    context.assetLimit=(assets+curr/price).toFixed(2)
    context.BHgain=((price/storage.startprice-1)*storage.startFiat).toFixed(2)
    context.percentBHgain=((price/storage.startprice-1)*100).toFixed(2)
    context.fiatGain=(context.currencyLimit-storage.startFiat).toFixed(2)
    context.percentFiatGain=((context.currencyLimit/storage.startFiat-1)*100).toFixed(2)
    context.BTCgain=(context.assetLimit-storage.startBTC).toFixed(2)
    context.percentBTCgain=((context.assetLimit/storage.startBTC-1)*100).toFixed(2)

    if QTRMESSAGES and Math.round(context.tick*TICKLENGTH/60) == (context.tick*TICKLENGTH/60)
        debug  " ****************************************************************************************** "  
        debug  " Day          #{(context.tick*TICKLENGTH/1440).toFixed(2)}  | Total Trades:         #{context.numTrades}   | Account value in Fiat:    #{context.currencyLimit} " 
        debug  " B&H % gain:  #{context.percentBHgain}% | Total B&H profit:     #{context.BHgain} | Account value in BTC:     #{context.assetLimit} " 
        debug  " Fiat % gain: #{context.percentFiatGain}% | Total Fiat profit:    #{context.fiatGain} | Fiat holdings:            #{context.balance_curr}"        
        debug  " BTC % gain:  #{context.percentBTCgain}% | Total BTC profit:     #{context.BTCgain} | Asset holdings:           #{context.balance_assets}"  
        debug  " ****************************************************************************************** "     


finalize: (contex, data)-> 

    # DISPLAY FINALIZE STATS
	info  " ****************************************************************************************** "  
	info  " Day          #{(context.tick*TICKLENGTH/1440).toFixed(2)}  | Total Trades:         #{context.numTrades}   | Account value in Fiat:    #{context.currencyLimit} " 
	info  " B&H % gain:  #{context.percentBHgain}% | Total B&H profit:     #{context.BHgain} | Account value in BTC:     #{context.assetLimit} " 
	info  " Fiat % gain: #{context.percentFiatGain}% | Total Fiat profit:    #{context.fiatGain} | Fiat holdings:            #{context.balance_curr}"        
	info  " BTC % gain:  #{context.percentBTCgain}% | Total BTC profit:     #{context.BTCgain} | Asset holdings:           #{context.balance_assets}"  
	info  " ****************************************************************************************** "     
	

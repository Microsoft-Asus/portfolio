################################ 
################################        
#####       ZForce4        #####
################################
################################        
P1   = 5
P2   = 10
P3   = 15
P4   = 20

A       = 1
B       = 2
G       = 3
D       = 4

ThreshBUY = 1
ThreshSELL = -1
################################
###   Logging/Debug options  ###
################################
TICKLENGTH =    15              #Current period in minutes
MESSAGES =      true           #Display conditions every tick
##################################################################################################


class F

    @diffx: (a,b) ->
        (a-b)/((a+b)/2)
    @tsf:(data,period) ->
        results = talib.TSF
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)        
    @linreg: (data,period) ->
        results = talib.LINEARREG
            inReal: data
            startIdx: 0
            endIdx: data.length - 1
            optInTimePeriod: period
        _.last(results)
    @stddev: (data, period) ->
        sum1=sum2=0
        for i in [1..period]
            select=data.length-1-period+i
            sum1=sum1+(data[select]*data[select])
            sum2=sum2+data[select]
            #log("i=#{i} | select=#{select} | data[#{select}]=#{data[select]} | sum1=#{sum1} | sum2=#{sum2}")
        sum2=sum2*sum2
        v=((period*sum1)-sum2)/(period*(period-1))
        #log("v=#{v}")
        result=Math.sqrt(v)
        result
        
class STATS
      @BALANCE: (ins) ->
    
        Price = _.last(ins.close)
        CurrCrypto = (portfolio.positions[ins.asset()].amount)         #   Coin balance
        CurrFiat = portfolio.positions[ins.curr()].amount        #   Derived Currency Balance
        AssetWorth = CurrCrypto*Price                              #   Equivalent worth of owned coins
        TotalFiat = (((CurrCrypto*Price) + CurrFiat))        #   Total net worth of coins + curr
        TotalCrypto = (TotalFiat/Price)
    
        pCrypto = (CurrCrypto/TotalCrypto)
        pFiat = (CurrFiat/TotalFiat)
        plot
            Equity:TotalFiat
            
init: (context)->
    

handle: (context, data, storage)->

    ins = data.instruments[0]
    close = ins.close[ins.close.length-1]*1
    storage.tick?=0
    storage.tick++
    signal=0

    tsf1    =   F.tsf(ins.close, P1)
    tsf2    =   F.tsf(ins.close, P2)
    tsf3    =   F.tsf(ins.close, P3)
    tsf4    =   F.tsf(ins.close, P4)

    stddev1 =   F.stddev(ins.close, P1)
    stddev2 =   F.stddev(ins.close, P2)
    stddev3 =   F.stddev(ins.close, P3)
    stddev4 =   F.stddev(ins.close, P4)
    
    zscore1 =   (close-tsf1)/stddev1
    zscore2 =   (close-tsf2)/stddev2
    zscore2 =   (close-tsf3)/stddev3    
    zscore2 =   (close-tsf4)/stddev4

    buy = A*zscore2 + B*zscore2 + G* zscore2 + D*zscore2 > ThreshBUY
    sell = A*zscore2 + B*zscore2 + G* zscore2 + D*zscore2 < ThreshSELL
    
    if buy
        signal=1
    if sell
        signal=-1



    if storage.tick==1
        storage.trades=0
        storage.LBP=storage.LSP=ins.price
    
    lasttrade=0
    if signal==1 and curr>25 
        buy ins
        storage.trades++
        lasttrade=1
        storage.LBP=ins.price
        debug("Trying to Buy at #{price}")
        storage.lastsignal=signal
        if (STDl==1 and Cr==0)
            plotMark
                StDevLong: ins.price
        if Fo==1
            plotMark
                FoLong: ins.price
    else
        if signal==-1 and assets>0.1
            sell ins
            storage.trades++
            lasttrade=-1
            storage.LSP=ins.price
            debug("Trying to Sell at #{price}")
            storage.lastsignal=signal
            if (STDs==1 and Fo==0)
                plotMark
                    StDevShort: ins.price
            if Cr==-1
                plotMark
                    CrShort: ins.price

            
##STATS
    price = ins.close[ins.close.length - 1]
    curr = portfolio.positions[ins.curr()].amount
    assets = portfolio.positions[ins.asset()].amount


    storage.counter?=0
    storage.counter+=1
    if storage.counter==1
        storage.longGAIN=storage.longLOSS=storage.shortGAIN=storage.shortLOSS=0
        storage.longWIN=storage.longLOSE=storage.shortWIN=storage.shortLOSE=0
    if lasttrade==1
        if storage.LBP<storage.LSP
            storage.shortWIN++
            storage.shortGAIN+=storage.LSP-storage.LBP
        if storage.LBP>storage.LSP
            storage.shortLOSS+=storage.LSP-storage.LBP
    if lasttrade==-1
        if storage.LSP>storage.LBP
            storage.longWIN++
            storage.longGAIN+=storage.LSP-storage.LBP
        if storage.LSP<storage.LBP
            storage.longLOSS+=storage.LSP-storage.LBP
    longratio=(2*storage.longWIN/storage.trades).toFixed(2)
    shortratio=(2*storage.shortWIN/storage.trades).toFixed(2)
    total_profit=(storage.longGAIN+storage.shortGAIN+storage.longLOSS+storage.shortLOSS)
    total_long_profit=storage.longGAIN+storage.longLOSS
    total_short_profit=storage.shortGAIN+storage.shortLOSS
    long_profit_ratio=(storage.longGAIN/(-storage.longLOSS)).toFixed(2)
    short_profit_ratio=(storage.shortGAIN/(-storage.shortLOSS)).toFixed(2)
        
        
    storage.startprice?=price
    storage.startCURRENCY?=curr+assets*price
    storage.startASSET?=assets+curr/price

    context.currencyLimit=(curr+assets*price).toFixed(2)
    context.assetLimit=(assets+curr/price).toFixed(2)
    context.BHprofit=((price/storage.startprice-1)*storage.startCURRENCY).toFixed(2)
    context.percentBHprofit=((price/storage.startprice-1)*100).toFixed(2)
    context.CURRENCYprofit=(context.currencyLimit-storage.startCURRENCY).toFixed(2)
    context.percentCURRENCYprofit=((context.currencyLimit/storage.startCURRENCY-1)*100).toFixed(2)
    context.ASSETprofit=(context.assetLimit-storage.startASSET).toFixed(2)
    context.percentASSETprofit=((context.assetLimit/storage.startASSET-1)*100).toFixed(2)

    if MESSAGES==true
        debug  " Start in CNY: #{storage.startCURRENCY.toFixed(2)} | TOT in CNY :    #{context.currencyLimit} | Start in BTC: #{storage.startASSET.toFixed(2)} | TOT in BTC: #{context.assetLimit}" 
        debug  " B&H % profit:  #{context.percentBHprofit}% | Total B&H profit:     #{context.BHprofit} | Account value in CNY:     #{context.assetLimit} " 
        debug  " CNY % profit: #{context.percentCURRENCYprofit}% | Total CNY profit:    #{context.CURRENCYprofit} | CNY holdings:            #{curr.toFixed(2)}"        
        debug  " BTC % profit:  #{context.percentASSETprofit}% | Total BTC profit:     #{context.ASSETprofit} | Asset holdings:           #{assets.toFixed(2)}"  
        debug  " Trades: #{storage.trades} | Longs - W/L #{longratio} Profit/Loss: #{long_profit_ratio}
        | Shorts - W/L: #{shortratio} % Profit/Loss: #{short_profit_ratio} "
        debug  " ****************************************************************************************** "     

            
            
            
          
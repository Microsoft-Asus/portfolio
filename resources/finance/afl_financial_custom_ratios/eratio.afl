SetCustomBacktestProc(""); //activate the custom backtester
if(Status("action") == actionPortfolio) //called when backtesting/optimising
{

	dateFrom=DateTimeConvert(2,Status("rangefromdate"));
	dateTo=DateTimeConvert(2,Status("rangetodate"),Status("rangetotime"));
	daysintest=DateTimeDiff( dateTo, dateFrom )/86000 +1;
	bo = GetBacktesterObject();
	bo.PreProcess(); // run default backtest procedure
	//TradeATR = NumTrades = ATRArr = 0; //init variables
	
	NumTrades=0;
	for( bar=0; bar < BarCount-1; bar++)
	{
		bo.ProcessTradeSignals(bar);
 
		for ( sig=bo.GetFirstSignal(bar); sig; sig=bo.GetNextSignal(bar) )
		{
			if (sig.isEntry())
			{
				NumTrades++;
				//ATRArr = Foreign("~atr_"+sig.Symbol, "C");
				//VarSet("TradeATR" + NumTrades, ATRArr[bar]);
 
				//_TRACE("Symbol " + sig.Symbol + " ATR: " + VarGet("TradeATR" + NumTrades));
			}
		}
	}
 
	AvgMAE = AccumMAE = AvgMFE = AccumMFE = NumTrades = 0;
 
	// iterate through closed trades
	for( trade = bo.GetFirstTrade(); trade; trade = bo.GetNextTrade() )
	{
		NumTrades++;
		//EntryATR = VarGet ("TradeATR" + NumTrades);
		//if ( EntryATR != 0 )
		//{
			//_TRACE("EntryATR: " + WriteVal(EntryATR));
			//_TRACE("AccumMAE : " + WriteVal(AccumMAE));
		AccumMAE = AccumMAE + (trade.GetMAE()*trade.EntryPrice);///(100*EntryATR));
		AccumMFE = AccumMFE + (trade.GetMFE()*trade.EntryPrice);///(100*EntryATR));
		//}
 
		trade.AddCustomMetric("My MAE", trade.GetMAE()*trade.EntryPrice/100);
		trade.AddCustomMetric("My MFE", trade.GetMFE()*trade.EntryPrice/100);
		//trade.AddCustomMetric("Entry ATR", EntryATR*10000);
	}
 
	AvgMAE = AccumMAE / NumTrades;
	AvgMFE = AccumMFE / NumTrades;
 
	//_TRACE(WriteVal(AccumMAE ));
	//_TRACE(WriteVal(NumTrades));
	//_TRACE(WriteVal(AvgMAE));
 
	
 
	//_TRACE(WriteVal(Eratio));
	
	st = bo.getperformancestats(0);
    NumTrades=st.GetValue("AllQty");
	TradesDay=NumTrades/daysintest;	
	meg= 100*(st.getvalue("CAR/MDD")^1.25)*st.getvalue("RRR");
	if (st.GetValue("NetProfitPercent")<=-100) {meg=-99999999999+st.GetValue("NetProfitPercent");}
	if (TradesDay<0.1) { meg=-99999999999+meg;}
	
	MFEMAE=1/(abs(AvgMFE)+abs(AvgMAE));
	Eratio = meg*MFEMAE;
 
	bo.AddCustomMetric( "Avg MAE", AvgMAE );
	bo.AddCustomMetric( "Avg MFE", AvgMFE );
	bo.AddCustomMetric( "Upper", 1 );
	bo.AddCustomMetric( "Down", (abs(AvgMFE)+abs(AvgMAE) ));
	bo.AddCustomMetric( "MFEMAE",MFEMAE  );
	bo.AddCustomMetric( "Meg", meg );
	bo.AddCustomMetric( "eratio", Eratio);
 
	bo.PostProcess();
}
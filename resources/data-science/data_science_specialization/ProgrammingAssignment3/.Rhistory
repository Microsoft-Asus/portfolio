cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
sum(flags$orange)
flags_colors <- flags[,11:17]
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,sapply(flag_colors,mean))
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
uniqe_vals2 <- sapply(flags,unique)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flsgs$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
?iris
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(iris$Species,mean)
lapply(iris$Species,mean)
tapply(iris$Species,iris$Sepal.Length,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris,1,mean)
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl,mtcars$mpg,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
?abs
tapply(mtcars$hp,mtcars$cyl,mean)
abs(209.21429,82.63636)
209.21429 - 82.63636
debug(ls)
ls
ls()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
## This function calculates the matrix unless it is already in cache, then it returns that
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if (!is.null(m))
{
message("getting cached matrix")
return m
}
data <- x$get()
m <- solve(x,...)
x$setmatrix(m)
m
}
source("matrixcache.R")
source("matrixcache.R")
magic(5)
magic(1,3,4;1,5,6;5,3,5)
KK=c(1,3,4;1,5,6;5,3,5)
MM=c(1,3,4,1,5,6,5,3,5,nrows=3,ncols=3)
MM
MM=matrix(c(1,3,4,1,5,6,5,3,5),nrows=3,ncols=3)
MM <-  matrix(c(1,3,4,1,5,6,5,3,5),nrow=3,ncol=3)
MM
makeCacheMatrix(MM)
cachesolve(MM)
cacheSolve(MM)
ls
ls()
ls
ls()
ls()
ok()
quit
q
debuggingsState(on=FALSE)
debuggingState(on=FALSE)
q
asdlfjasldfjasklÃ±fj
?browser
c
c
c
c
c
c
Q
MM
MM=matrix(c(1,2,3,4,5,6,7,8,9),ncol=3,nrow = 3)
MM
cacheSolve(MM)
source("matrixcache.R")
cacheSolve(MM)
source("matrixcache.R")
cacheSolve(MM)
source("matrixcache.R")
cacheSolve(MM)
source("matrixcache.R")
cacheSolve(MM)
cacheSolve(MM)
MM2=matrix(c(1,2,3,4,5,6,7,8,9),ncol=3,nrow = 3)
cacheSolve(MM2)
class(MM2)
MM3=matrix(c(1,2,3,4,5,6,7,8,9),ncol=3,nrow = 3)
source("matrixcache.R")
cacheSolve(MM3)
source("matrixcache.R")
cacheSolve(MM3)
makeCacheMatrix(MM3)
cacheSolve(MM3)
source("matrixcache.R")
makeCacheMatrix(MM3)
cacheSolve(MM3)
source("matrixcache.R")
makeCacheMatrix(MM3)
cacheSolve(MM3)
source("matrixcache.R")
cacheSolve(MM3)
source("matrixcache.R")
cacheSolve(MM3)
source("matrixcache.R")
cacheSolve(MM3)
source("matrixcache.R")
cacheSolve(MM3)
source("matrixcache.R")
cacheSolve(MM3)
source("matrixcache.R")
makeCacheMatrix(MM3)
cacheSolve(MM3)
source("matrixcache.R")
makeCacheMatrix(MM3)
cacheSolve(MM3)
MM3
cacheSolve(MM3)
source("matrixcache.R")
cacheSolve(MM3)
source("matrixcache.R")
cacheSolve(MM3)
dim(MM3)
source("matrixcache.R")
cacheSolve(MM3)
clear
clc
cls
MM=matrix(c(1,2,3,4,5,6,7,8,9),ncol=3,nrow = 3)
dim(MM)
source("matrizcache.R")
source("matrizcache.R")
source("matrixcache.R")
makeCacheMatrix(MM)
MM
cacheSolve(MM)
source("matrixcache.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head("Scientific_Name")
head()
head(Scientific_Name)
head(4)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
str(LETTERS)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace=TRUE,c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,100,prob=0.7)
flips2 <- rbinom(size=1,n=100,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,mean=10)
poiis (5)
rpois(5)
rpois(5,lambda=10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,main="My Plot")
plot(cars,main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
plot(cars, pch=2)
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl)
boxplot(data=mtcars,formula=mpg~cyl)
boxplot(data=mtcars)
boxplot(data=mtcars,x=mtcars$mpg)
boxplot(formula=mpg~cyl,data=mtcars)
hist(mtcars$mpg)
cdpwd("C:\Users\David\datasciencecoursera\ProgAssignment3")
?cdpwd
?cdwd
?setwd
setwd("C:\Users\David\datasciencecoursera\ProgAssignment3")
setwd("C:/Users/David/datasciencecoursera/ProgAssignment3")
getwd()
ls()
setwd("C:/Users/David/AppData/Local/Temp/RtmpItcIbe")
setwd("C:/Users/David/datasciencecoursera/ProgAssignment3")
ls()
dir()
data("occupationalStatus")
data("hospital-data.csv")
dir
di()
dir()
data("hospital-data.csv")
str(hospital-data.csv)
str(hospital-data)
data("hospital-data")
data(hospital-data)
ls()
setwd("C:/Users/David/datasciencecoursera/ProgAssignment3")
data()dir()
dir()
outcome <-read.csv("outcome-of-care-measures.csv",colClasses="character")
str(outcome)
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
names(outcome)
data[,1]
data(,1)
outcome(,1)
outcome[,1]
outcome[,11]
str(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
ls
ls()
dir
dir()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
summary(outcome)
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
?which
ls()
str(outcome$State)
names(outcome$State)
summary(outcome$State)
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
?colname
?colnum
data[11,]
data[data[11,],]
data[11,]
data[,11]
data[data[,11],]
source(best.R)
source("best.R")
source("best.R")
best("NY","pneumonia")
best("TX","heart attack")
data$State
best("TX","heart attack")
best("CA","heart attack")
names(data)
source("best.R")
best("CA","heart attack")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
data[data$State=="TX"]
data[data$State=="TX",]
$message
?message
len(data)
length(data)
source("best.R")
best("TX","heart attack")
data[data[,11],]
min(data[data[,11],])
data[min(data[,11]),])
data[min(data[,11]),]
source("best.R")
best("TX","heart attack")
minim<-data[min(data[,17]),]
minim
data[minim,2]
data[data[minim],2]
data[,11]
data[as.numeric(data[,11]),]
data[min(data[,11]),]
?min
?min
filter <-data[min(data[,23],na.rm=T),]
filter
data[filter,2]
min(data[,23],na.rm=T)
filter <-data[data[,11]==min(data[,11],na.rm=T),]
filter
min(data[,11],na.rm=T)
data[data[,11]==min(data[,11],na.rm=T),]
data[data[,11]==min(data[,11],na.rm=T),2]
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
best("TX","heart failure")
best("MD","heart attack")
best("MD","pneumonia")
best("BB","pneumonia")
best("NY","hart attack")
submit()
source("rankhospital.R")
rankhospital("MN","heart attack",5000)
rankhospital("MN","heart attack",worst)
rankhospital("MN","heart attack","worst")
rankhospital("MN","heart attack",4)
rankhospital("TX","heart failure",4)
rankhospital("MD","heart attack","worst")
rankhospital("MN","heart attack",5000)
source("rankhospital.R")
rankhospital("MN","heart attack",5000)
length(data[,23])
source("rankhospital.R")
rankhospital("MN","heart attack",5000)
source("rankhospital.R")
rankhospital("MN","heart attack",5000)
rankhospital("MD","heart attack","worst")
rankhospital("TX","heart failure", 4)
source("rankhospital.R")
rankhospital("TX","heart failure", 4)
rankhospital("MD","heart attack","worst")
source("rankhospital.R")
rankhospital("MD","heart attack","worst")
source("rankhospital.R")
rankhospital("MD","heart attack","worst")
filter(data,11,3)
code<-11
data[,11]
filter(data,11,3)
source("rankhospital.R")
filter(data,11,3)
filter(data,11,3)
source("rankhospital.R")
filter(data,11,3)
source("rankhospital.R")
filter(data,11,3)
rankhospital("MD","heart attack","worst")
rankhospital("MD","heart attack",5000)
rankhospital("TX","heart failure",4)
source("rankhospital.R")
rankhospital("MD","heart attack","worst")
data[data[,11],2]
data[,code]==max(data[,code],na.rm=T)
max(data[,code],na.rm=T)
max(data[,11],na.rm=T)
data[,11]
data[,code]==length(data[,code])
source("rankhospital.R")
rankhospital("MD","heart attack","worst")
rankhospital("MD","heart attack","best")
data[data[,code]==min(data[,code],na.rm=T),2]
source("rankhospital.R")
data[data[,code]==min(data[,code],na.rm=T),2]
filter(data,code,"best")
source("rankhospital.R")
filter(data,code,"best")
source("rankhospital.R")
data[data[,code]==min(data[,code],na.rm=T),2]
filter(data,code,"best")
source("rankhospital.R")
filter(data,code,"best")
source("rankhospital.R")
filter(data,code,"best")
filter(data,code,"best")
source("rankhospital.R")
filter(data,code,"best")
filter(data,code,"worst")
source("rankhospital.R")
filter(data,code,"worst")
source("rankhospital.R")
filter(data,code,"worst")
rankhospital("TX","heart failure",4)
rankhospital("TX","heart failure","best")
source("rankhospital.R")
rankhospital("TX","heart failure","best")
rankhospital("MD","heart attack","worst")
rankhospital("MN","heart attack",5000)
source("rankhospital.R")
rankhospital("TX","heart failure","best")
rankhospital("MD","heart attack","worst")
rankhospital("MN","heart attack", 5000)
submit()
submit
source(submit)
source("submit.R")
setwd("C:/Users/David/datasciencecoursera/ProgAssignment3")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source("rankhospital.R")
source("rankhospital.R")
rankhospital("WA", "heart attack", 7)
source("rankhospital.R")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source("rankall.R")
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
